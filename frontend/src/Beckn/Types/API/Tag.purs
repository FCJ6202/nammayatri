-- File auto generated by purescript-bridge! --
module Beckn.Types.API.Tag where

import Beckn.Types.Storage.EntityTag (EntityTagT)
import Beckn.Types.Storage.Tag (TagT)
import Data.Functor.Identity (Identity)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, String)

import Prelude
import Data.Generic (class Generic)

newtype ListRes =
    ListRes {
      _tags :: Array (TagT Identity)
    }

derive instance genericListRes :: Generic ListRes
derive instance newtypeListRes :: Newtype ListRes _

--------------------------------------------------------------------------------
_ListRes :: Iso' ListRes { _tags :: Array (TagT Identity)}
_ListRes = _Newtype

tags :: Lens' ListRes (Array (TagT Identity))
tags = _Newtype <<< prop (SProxy :: SProxy "_tags")

--------------------------------------------------------------------------------
newtype CreateRes =
    CreateRes {
      _tag :: TagT Identity
    }

derive instance genericCreateRes :: Generic CreateRes
derive instance newtypeCreateRes :: Newtype CreateRes _

--------------------------------------------------------------------------------
_CreateRes :: Iso' CreateRes { _tag :: TagT Identity}
_CreateRes = _Newtype

tag :: Lens' CreateRes (TagT Identity)
tag = _Newtype <<< prop (SProxy :: SProxy "_tag")

--------------------------------------------------------------------------------
newtype CreateReq =
    CreateReq {
      _tagType :: String
    , _tag :: String
    , _info :: Maybe String
    }

derive instance genericCreateReq :: Generic CreateReq
derive instance newtypeCreateReq :: Newtype CreateReq _

--------------------------------------------------------------------------------
_CreateReq :: Iso' CreateReq { _tagType :: String, _tag :: String, _info :: Maybe String}
_CreateReq = _Newtype

tagType :: Lens' CreateReq String
tagType = _Newtype <<< prop (SProxy :: SProxy "_tagType")

tag :: Lens' CreateReq String
tag = _Newtype <<< prop (SProxy :: SProxy "_tag")

info :: Lens' CreateReq (Maybe String)
info = _Newtype <<< prop (SProxy :: SProxy "_info")

--------------------------------------------------------------------------------
newtype TagEntityReq =
    TagEntityReq {
      _EntityId :: String
    , _entityType :: String
    , _TagId :: String
    }

derive instance genericTagEntityReq :: Generic TagEntityReq
derive instance newtypeTagEntityReq :: Newtype TagEntityReq _

--------------------------------------------------------------------------------
_TagEntityReq :: Iso' TagEntityReq { _EntityId :: String, _entityType :: String, _TagId :: String}
_TagEntityReq = _Newtype

EntityId :: Lens' TagEntityReq String
EntityId = _Newtype <<< prop (SProxy :: SProxy "_EntityId")

entityType :: Lens' TagEntityReq String
entityType = _Newtype <<< prop (SProxy :: SProxy "_entityType")

TagId :: Lens' TagEntityReq String
TagId = _Newtype <<< prop (SProxy :: SProxy "_TagId")

--------------------------------------------------------------------------------
newtype TagEntityRes =
    TagEntityRes {
      _entityTag :: EntityTagT Identity
    }

derive instance genericTagEntityRes :: Generic TagEntityRes
derive instance newtypeTagEntityRes :: Newtype TagEntityRes _

--------------------------------------------------------------------------------
_TagEntityRes :: Iso' TagEntityRes { _entityTag :: EntityTagT Identity}
_TagEntityRes = _Newtype

entityTag :: Lens' TagEntityRes (EntityTagT Identity)
entityTag = _Newtype <<< prop (SProxy :: SProxy "_entityTag")

--------------------------------------------------------------------------------
