-- File auto generated by purescript-bridge! --
module Beckn.Types.API.PassApplication where

import Beckn.Types.App (CustomerId, OrganizationId, TenantOrganizationId)
import Beckn.Types.Common (Location, PassApplicationType, TravellerIDType)
import Beckn.Types.Storage.PassApplication (PassApplicationT, Status)
import Data.Functor.Identity (Identity)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Data.Time.LocalTime.Internal.LocalTime (LocalTime)
import Prim (Array, Int, String)

import Prelude
import Data.Generic (class Generic)

newtype CreatePassApplicationReq =
    CreatePassApplicationReq {
      _CustomerId :: Maybe CustomerId
    , _OrganizationId :: Maybe OrganizationId
    , _TenantOrganizationId :: Maybe TenantOrganizationId
    , _fromDate :: LocalTime
    , _toDate :: LocalTime
    , _fromLocation :: Maybe Location
    , _toLocation :: Location
    , _purpose :: Maybe String
    , _travellerName :: Maybe String
    , _travellerID :: Maybe String
    , _travellerIDType :: Maybe TravellerIDType
    , _type :: PassApplicationType
    , _count :: Maybe Int
    }

derive instance genericCreatePassApplicationReq :: Generic CreatePassApplicationReq
derive instance newtypeCreatePassApplicationReq :: Newtype CreatePassApplicationReq _

--------------------------------------------------------------------------------
_CreatePassApplicationReq :: Iso' CreatePassApplicationReq { _CustomerId :: Maybe CustomerId, _OrganizationId :: Maybe OrganizationId, _TenantOrganizationId :: Maybe TenantOrganizationId, _fromDate :: LocalTime, _toDate :: LocalTime, _fromLocation :: Maybe Location, _toLocation :: Location, _purpose :: Maybe String, _travellerName :: Maybe String, _travellerID :: Maybe String, _travellerIDType :: Maybe TravellerIDType, _type :: PassApplicationType, _count :: Maybe Int}
_CreatePassApplicationReq = _Newtype

CustomerId :: Lens' CreatePassApplicationReq (Maybe CustomerId)
CustomerId = _Newtype <<< prop (SProxy :: SProxy "_CustomerId")

OrganizationId :: Lens' CreatePassApplicationReq (Maybe OrganizationId)
OrganizationId = _Newtype <<< prop (SProxy :: SProxy "_OrganizationId")

TenantOrganizationId :: Lens' CreatePassApplicationReq (Maybe TenantOrganizationId)
TenantOrganizationId = _Newtype <<< prop (SProxy :: SProxy "_TenantOrganizationId")

fromDate :: Lens' CreatePassApplicationReq LocalTime
fromDate = _Newtype <<< prop (SProxy :: SProxy "_fromDate")

toDate :: Lens' CreatePassApplicationReq LocalTime
toDate = _Newtype <<< prop (SProxy :: SProxy "_toDate")

fromLocation :: Lens' CreatePassApplicationReq (Maybe Location)
fromLocation = _Newtype <<< prop (SProxy :: SProxy "_fromLocation")

toLocation :: Lens' CreatePassApplicationReq Location
toLocation = _Newtype <<< prop (SProxy :: SProxy "_toLocation")

purpose :: Lens' CreatePassApplicationReq (Maybe String)
purpose = _Newtype <<< prop (SProxy :: SProxy "_purpose")

travellerName :: Lens' CreatePassApplicationReq (Maybe String)
travellerName = _Newtype <<< prop (SProxy :: SProxy "_travellerName")

travellerID :: Lens' CreatePassApplicationReq (Maybe String)
travellerID = _Newtype <<< prop (SProxy :: SProxy "_travellerID")

travellerIDType :: Lens' CreatePassApplicationReq (Maybe TravellerIDType)
travellerIDType = _Newtype <<< prop (SProxy :: SProxy "_travellerIDType")

type :: Lens' CreatePassApplicationReq PassApplicationType
type = _Newtype <<< prop (SProxy :: SProxy "_type")

count :: Lens' CreatePassApplicationReq (Maybe Int)
count = _Newtype <<< prop (SProxy :: SProxy "_count")

--------------------------------------------------------------------------------
newtype PassApplicationRes =
    PassApplicationRes {
      passApplication :: PassApplicationT Identity
    }

derive instance genericPassApplicationRes :: Generic PassApplicationRes
derive instance newtypePassApplicationRes :: Newtype PassApplicationRes _

--------------------------------------------------------------------------------
_PassApplicationRes :: Iso' PassApplicationRes { passApplication :: PassApplicationT Identity}
_PassApplicationRes = _Newtype

--------------------------------------------------------------------------------
newtype ListPassApplicationRes =
    ListPassApplicationRes {
      _passApplications :: Array PassAppInfo
    }

derive instance genericListPassApplicationRes :: Generic ListPassApplicationRes
derive instance newtypeListPassApplicationRes :: Newtype ListPassApplicationRes _

--------------------------------------------------------------------------------
_ListPassApplicationRes :: Iso' ListPassApplicationRes { _passApplications :: Array PassAppInfo}
_ListPassApplicationRes = _Newtype

passApplications :: Lens' ListPassApplicationRes (Array PassAppInfo)
passApplications = _Newtype <<< prop (SProxy :: SProxy "_passApplications")

--------------------------------------------------------------------------------
newtype UpdatePassApplicationReq =
    UpdatePassApplicationReq {
      _status :: Status
    , _approvedCount :: Maybe Int
    , _remarks :: Maybe String
    }

derive instance genericUpdatePassApplicationReq :: Generic UpdatePassApplicationReq
derive instance newtypeUpdatePassApplicationReq :: Newtype UpdatePassApplicationReq _

--------------------------------------------------------------------------------
_UpdatePassApplicationReq :: Iso' UpdatePassApplicationReq { _status :: Status, _approvedCount :: Maybe Int, _remarks :: Maybe String}
_UpdatePassApplicationReq = _Newtype

status :: Lens' UpdatePassApplicationReq Status
status = _Newtype <<< prop (SProxy :: SProxy "_status")

approvedCount :: Lens' UpdatePassApplicationReq (Maybe Int)
approvedCount = _Newtype <<< prop (SProxy :: SProxy "_approvedCount")

remarks :: Lens' UpdatePassApplicationReq (Maybe String)
remarks = _Newtype <<< prop (SProxy :: SProxy "_remarks")

--------------------------------------------------------------------------------
