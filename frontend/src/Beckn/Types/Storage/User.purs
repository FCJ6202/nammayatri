-- File auto generated by purescript-bridge! --
module Beckn.Types.Storage.User where

import Beckn.Types.App (OrganizationId, TenantOrganizationId, UserId)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Data.Time.LocalTime.Internal.LocalTime (LocalTime)
import Prim (Boolean, String)

import Prelude
import Data.Generic (class Generic)

newtype UserT Identity =
    User {
      _id :: UserId
    , _OrganizationId :: OrganizationId
    , _TenantOrganizationId :: Maybe TenantOrganizationId
    , _name :: String
    , _username :: String
    , _mobileNumber :: String
    , _email :: String
    , _role :: Role
    , _verified :: Boolean
    , _status :: Status
    , _info :: Maybe String
    , _createdAt :: LocalTime
    , _updatedAt :: LocalTime
    }

derive instance genericUserT :: Generic (UserT Identity)
derive instance newtypeUserT :: Newtype (UserT Identity) _

--------------------------------------------------------------------------------
_User :: forall Identity. Iso' (UserT Identity) { _id :: UserId, _OrganizationId :: OrganizationId, _TenantOrganizationId :: Maybe TenantOrganizationId, _name :: String, _username :: String, _mobileNumber :: String, _email :: String, _role :: Role, _verified :: Boolean, _status :: Status, _info :: Maybe String, _createdAt :: LocalTime, _updatedAt :: LocalTime}
_User = _Newtype

id :: forall Identity. Lens' (UserT Identity) UserId
id = _Newtype <<< prop (SProxy :: SProxy "_id")

OrganizationId :: forall Identity. Lens' (UserT Identity) OrganizationId
OrganizationId = _Newtype <<< prop (SProxy :: SProxy "_OrganizationId")

TenantOrganizationId :: forall Identity. Lens' (UserT Identity) (Maybe TenantOrganizationId)
TenantOrganizationId = _Newtype <<< prop (SProxy :: SProxy "_TenantOrganizationId")

name :: forall Identity. Lens' (UserT Identity) String
name = _Newtype <<< prop (SProxy :: SProxy "_name")

username :: forall Identity. Lens' (UserT Identity) String
username = _Newtype <<< prop (SProxy :: SProxy "_username")

mobileNumber :: forall Identity. Lens' (UserT Identity) String
mobileNumber = _Newtype <<< prop (SProxy :: SProxy "_mobileNumber")

email :: forall Identity. Lens' (UserT Identity) String
email = _Newtype <<< prop (SProxy :: SProxy "_email")

role :: forall Identity. Lens' (UserT Identity) Role
role = _Newtype <<< prop (SProxy :: SProxy "_role")

verified :: forall Identity. Lens' (UserT Identity) Boolean
verified = _Newtype <<< prop (SProxy :: SProxy "_verified")

status :: forall Identity. Lens' (UserT Identity) Status
status = _Newtype <<< prop (SProxy :: SProxy "_status")

info :: forall Identity. Lens' (UserT Identity) (Maybe String)
info = _Newtype <<< prop (SProxy :: SProxy "_info")

createdAt :: forall Identity. Lens' (UserT Identity) LocalTime
createdAt = _Newtype <<< prop (SProxy :: SProxy "_createdAt")

updatedAt :: forall Identity. Lens' (UserT Identity) LocalTime
updatedAt = _Newtype <<< prop (SProxy :: SProxy "_updatedAt")

--------------------------------------------------------------------------------
