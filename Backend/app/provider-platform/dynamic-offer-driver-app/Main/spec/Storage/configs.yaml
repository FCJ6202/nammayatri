imports:
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.Merchant.MerchantOperatingCity
  BatchSplitByPickupDistance: SharedLogic.Allocator.Jobs.SendSearchRequestToDrivers.Handle.Internal.DriverPool.Config
  PoolSortingType: SharedLogic.Allocator.Jobs.SendSearchRequestToDrivers.Handle.Internal.DriverPool.Config
  Seconds: Kernel.Types.Common
  IndianState: Kernel.Types.Beckn.Context
  ServiceTierType: Domain.Types.ServiceTierType
  Area: Lib.Types.SpecialLocation

DriverPoolConfig:
  tableName: driver_pool_config

  fields:
    id: Id DriverPoolConfig
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    minRadiusOfSearch: Distance
    maxRadiusOfSearch: Distance
    radiusStepSize: Distance
    driverPositionInfoExpiry: Maybe Seconds
    actualDistanceThreshold: Maybe Distance
    maxDriverQuotesRequired: Int
    driverQuoteLimit: Int
    driverRequestCountLimit: Int
    driverBatchSize: Int
    distanceBasedBatchSplit: "[BatchSplitByPickupDistance]"
    maxNumberOfBatches: Int
    maxParallelSearchRequests: Int
    poolSortingType: PoolSortingType
    singleBatchProcessTime: Seconds
    tripDistance: Distance
    radiusShrinkValueForDriversOnRide: Distance
    driverToDestinationDistanceThreshold: Distance
    driverToDestinationDuration: Seconds
    scheduleTryTimes: "[Int]"
    area: Area
    createdAt: UTCTime
    updatedAt: UTCTime
    vehicleVariant: Maybe ServiceTierType|NoRelation
    tripCategory: Text
    thresholdToIgnoreActualDistanceThreshold: Maybe Distance

  beamFields:
    minRadiusOfSearch:
      minRadiusOfSearch: Meters
      minRadiusOfSearchValue: Maybe HighPrecDistance
    maxRadiusOfSearch:
      maxRadiusOfSearch: Meters
      maxRadiusOfSearchValue: Maybe HighPrecDistance
    radiusStepSize:
      radiusStepSize: Meters
      radiusStepSizeValue: Maybe HighPrecDistance
    actualDistanceThreshold:
      actualDistanceThreshold: Maybe Meters
      actualDistanceThresholdValue: Maybe HighPrecDistance
    tripDistance:
      tripDistance: Meters
      tripDistanceValue: Maybe HighPrecDistance
      distanceUnit: Maybe DistanceUnit
    radiusShrinkValueForDriversOnRide:
      radiusShrinkValueForDriversOnRide: Meters
      radiusShrinkValueForDriversOnRideValue: Maybe HighPrecDistance
    driverToDestinationDistanceThreshold:
      driverToDestinationDistanceThreshold: Meters
      driverToDestinationDistanceThresholdValue: Maybe HighPrecDistance
    thresholdToIgnoreActualDistanceThreshold:
      thresholdToIgnoreActualDistanceThreshold: Maybe Meters
      thresholdToIgnoreActualDistanceThresholdValue: Maybe HighPrecDistance

  fromTType:
    minRadiusOfSearch: Kernel.Types.Common.mkDistanceWithDefaultMeters distanceUnit minRadiusOfSearchValue minRadiusOfSearch|E
    maxRadiusOfSearch: Kernel.Types.Common.mkDistanceWithDefaultMeters distanceUnit maxRadiusOfSearchValue maxRadiusOfSearch|E
    radiusStepSize: Kernel.Types.Common.mkDistanceWithDefaultMeters distanceUnit radiusStepSizeValue radiusStepSize|E
    actualDistanceThreshold: Kernel.Types.Common.mkDistanceWithDefaultMeters distanceUnit actualDistanceThresholdValue <$> actualDistanceThreshold|E
    tripDistance: Kernel.Types.Common.mkDistanceWithDefaultMeters distanceUnit tripDistanceValue tripDistance|E
    radiusShrinkValueForDriversOnRide: Kernel.Types.Common.mkDistanceWithDefaultMeters distanceUnit radiusShrinkValueForDriversOnRideValue radiusShrinkValueForDriversOnRide|E
    driverToDestinationDistanceThreshold: Kernel.Types.Common.mkDistanceWithDefaultMeters distanceUnit driverToDestinationDistanceThresholdValue driverToDestinationDistanceThreshold|E
    thresholdToIgnoreActualDistanceThreshold: Kernel.Types.Common.mkDistanceWithDefaultMeters distanceUnit thresholdToIgnoreActualDistanceThresholdValue <$> thresholdToIgnoreActualDistanceThreshold|E

  # unit should be the same for all fields
  toTType:
    minRadiusOfSearch: Kernel.Types.Common.distanceToMeters|I
    minRadiusOfSearchValue: Kernel.Prelude.Just $ Kernel.Types.Common.distanceToHighPrecDistance (Kernel.Prelude.Just $ (.unit) tripDistance)|I
    maxRadiusOfSearch: Kernel.Types.Common.distanceToMeters|I
    maxRadiusOfSearchValue: Kernel.Prelude.Just $ Kernel.Types.Common.distanceToHighPrecDistance (Kernel.Prelude.Just $ (.unit) tripDistance)|I
    radiusStepSize: Kernel.Types.Common.distanceToMeters|I
    radiusStepSizeValue: Kernel.Prelude.Just $ Kernel.Types.Common.distanceToHighPrecDistance (Kernel.Prelude.Just $ (.unit) tripDistance)|I
    actualDistanceThreshold: Kernel.Prelude.fmap Kernel.Types.Common.distanceToMeters|I
    actualDistanceThresholdValue: Kernel.Prelude.fmap (Kernel.Types.Common.distanceToHighPrecDistance (Kernel.Prelude.Just $ (.unit) tripDistance))|I
    tripDistance: Kernel.Types.Common.distanceToMeters|I
    tripDistanceValue: Kernel.Prelude.Just $ Kernel.Types.Common.distanceToHighPrecDistance (Kernel.Prelude.Just $ (.unit) tripDistance)|I
    distanceUnit: Kernel.Prelude.Just $ (.unit) tripDistance|E
    radiusShrinkValueForDriversOnRide: Kernel.Types.Common.distanceToMeters|I
    radiusShrinkValueForDriversOnRideValue: Kernel.Prelude.Just $ Kernel.Types.Common.distanceToHighPrecDistance (Kernel.Prelude.Just $ (.unit) tripDistance)|I
    driverToDestinationDistanceThreshold: Kernel.Types.Common.distanceToMeters|I
    driverToDestinationDistanceThresholdValue: Kernel.Prelude.Just $ Kernel.Types.Common.distanceToHighPrecDistance (Kernel.Prelude.Just $ (.unit) tripDistance)|I
    thresholdToIgnoreActualDistanceThreshold: Kernel.Prelude.fmap Kernel.Types.Common.distanceToMeters|I
    thresholdToIgnoreActualDistanceThresholdValue: Kernel.Prelude.fmap (Kernel.Types.Common.distanceToHighPrecDistance (Kernel.Prelude.Just $ (.unit) tripDistance))|I

  beamInstance:
    - MakeTableInstances
    - Custom Domain.Types.UtilsTH.mkCacParseInstance
  constraints:
    id: PrimaryKey

  sqlType:
    distanceBasedBatchSplit: text[]
    scheduleTryTimes: integer[]

  default:
    tripCategory: "'All'"
    area: "'Default'"
    distanceBasedBatchSplit: "Array ['BatchSplitByPickupDistance { batchSplitSize = 1, batchSplitDelay = 0 }', 'BatchSplitByPickupDistance { batchSplitSize = 1, batchSplitDelay = 4 }']"
    scheduleTryTimes: "'{1800, 900, 300}'"

  queries:
    findAllByMerchantOpCityId:
      kvFunction: findAllWithOptionsKV
      where: merchantOperatingCityId
      orderBy: tripDistance

MerchantState:
  tableName: merchant_state

  fields:
    merchantId: Id Merchant
    state: IndianState
    allowedDestinationStates: "[IndianState]"

  excludedFields: [merchantOperatingCityId]

  constraints:
    merchantId: PrimaryKey
    state: PrimaryKey

  sqlType:
    allowedDestinationStates: text[]

  queries:
    findByMerchantIdAndState:
      kvFunction: findOneWithKV
      where:
        and: [merchantId, state]

InterCityTravelCities:
  tableName: inter_city_travel_cities

  fields:
    merchantId: Id Merchant
    cityName: Text
    state: IndianState
    lat: Double
    lng: Double

  excludedFields: [merchantOperatingCityId]

  constraints:
    merchantId: PrimaryKey
    cityName: PrimaryKey

  queries:
    findByMerchantAndState:
      kvFunction: findAllWithKV
      where:
        and: [merchantId, state]

ValueAddNP:
  tableName: value_add_np

  fields:
    subscriberId: Text
    enabled: Bool

  constraints:
    subscriberId: PrimaryKey

  excludedFields: [merchantId, merchantOperatingCityId]

  queries:
    findAll:
      kvFunction: findAllWithKV
      where: enabled
