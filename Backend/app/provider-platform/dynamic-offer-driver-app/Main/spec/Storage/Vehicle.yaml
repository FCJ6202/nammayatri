imports:
  Person: Domain.Types.Person
  Merchant: Domain.Types.Merchant
  UTCTime: Kernel.Prelude
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  ServiceTierType: Domain.Types.ServiceTierType

Vehicle:
  tableName: vehicle

  types:
    Category:
      enum: "CAR,MOTORCYCLE,TRAIN,BUS,FLIGHT,AUTO_CATEGORY"
      derive: "HttpInstance"
    RegistrationCategory:
      enum: "COMMERCIAL,PERSONAL,OTHER,PUBLIC"
      derive: "HttpInstance"
    Variant:
      enum: "SEDAN,SUV,HATCHBACK,AUTO_RICKSHAW,TAXI,TAXI_PLUS,BIKE"
      derive: "HttpInstance,Enum,Bounded"
    VehicleAPIEntity:
      driverId: Id Person
      variant: Variant
      serviceTierType: Maybe ServiceTierType
      model: Text
      color: Text
      vehicleName: Maybe Text
      registrationNo: Text
      category: Maybe Category
      capacity: Maybe Int
      createdAt: UTCTime

  fields:
    driverId: Id Person
    merchantId: Id Merchant
    variant: Variant
    model: Text
    color: Text
    vehicleName: Maybe Text
    registrationNo: Text
    capacity: Maybe Int
    category: Maybe Category
    make: Maybe Text
    size: Maybe Text
    energyType: Maybe Text
    registrationCategory: Maybe RegistrationCategory
    vehicleClass: Text
    airConditioned: Maybe Bool
    luggageCapacity: Maybe Int
    vehicleRating: Maybe Double
    selectedServiceTiers: '[ServiceTierType]'

  default:
    selectedServiceTiers: "'{}'"

  sqlType:
    selectedServiceTiers: text[]

  constraints:
    driverId: PrimaryKey
    registrationNo: SecondaryKey

  extraOperations:
    - EXTRA_QUERY_FILE

  queries:
    findById:
      kvFunction: findOneWithKV
      where: driverId
    findByRegistrationNo:
      kvFunction: findOneWithKV
      where: registrationNo
    updateVehicleName:
      kvFunction: updateWithKV
      params: [vehicleName]
      where: driverId
    updateVehicleModel:
      kvFunction: updateWithKV
      params: [model]
      where: driverId
    updateVehicleVariant:
      kvFunction: updateWithKV
      params: [variant]
      where: driverId
    updateSelectedServiceTiers:
      kvFunction: updateOneWithKV
      params: [selectedServiceTiers]
      where: driverId
    updateVariantAndServiceTiers:
      kvFunction: updateOneWithKV
      params: [variant, selectedServiceTiers]
      where: driverId
    updateAirConditioned:
      kvFunction: updateWithKV
      params: [airConditioned]
      where: driverId