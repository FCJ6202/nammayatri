imports:
  Person: Domain.Types.Person
  Ride: Domain.Types.Ride
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  UTCTime: Kernel.Prelude
  Text: Data.Text
  Money: Kernel.Types.Common
  PayoutOrderStatus: Kernel.External.Payout.Juspay.Types.Payout

DailyStats:
  tableName: daily_stats
  derives: "Generic,Show,ToJSON,FromJSON"
  types:
    PayoutStatus:
      enum: "Verifying,Processing,Success,Failed,ManualReview"
  fields:
    id : Text
    driverId : Id Person
    totalEarnings : HighPrecMoney
    currency: Currency
    numRides : Int
    totalDistance : Meters
    distanceUnit : DistanceUnit
    merchantLocalDate : Day
    activatedValidRides: Int
    referralEarnings: HighPrecMoney
    referralCounts: Int
    payoutStatus: PayoutStatus
    payoutOrderId: Maybe Text
    payoutOrderStatus: Maybe PayoutOrderStatus

  beamType:
    distanceUnit: Maybe DistanceUnit
    activatedValidRides: Maybe Int
    referralCounts: Maybe Int
    payoutStatus: Maybe PayoutStatus

  beamFields:
    totalEarnings:
      totalEarnings: Money
      totalEarningsAmount: Maybe HighPrecMoney
    currency:
      currency: Maybe Currency
    referralEarnings:
      referralEarnings: Money
      referralEarningsAmount: Maybe HighPrecMoney

  fromTType:
    totalEarnings: Kernel.Types.Common.mkAmountWithDefault totalEarningsAmount totalEarnings|E
    currency: Kernel.Prelude.fromMaybe Kernel.Types.Common.INR|I
    distanceUnit: Kernel.Prelude.fromMaybe Kernel.Types.Common.Meter|I
    referralEarnings: Kernel.Types.Common.mkAmountWithDefault referralEarningsAmount referralEarnings|E
    activatedValidRides:  Kernel.Prelude.fromMaybe 0|I
    referralCounts: Kernel.Prelude.fromMaybe 0|I
    payoutStatus: Kernel.Prelude.fromMaybe Domain.Types.DailyStats.Verifying|I

  toTType:
    totalEarnings: Kernel.Prelude.roundToIntegral|I
    totalEarningsAmount:  Kernel.Prelude.Just|I
    currency: Kernel.Prelude.Just|I
    distanceUnit: Kernel.Prelude.Just|I
    referralEarnings: Kernel.Prelude.roundToIntegral|I
    referralEarningsAmount: Kernel.Prelude.Just|I
    activatedValidRides:  Kernel.Prelude.Just|I
    referralCounts: Kernel.Prelude.Just|I
    payoutStatus: Kernel.Prelude.Just|I

  constraints:
    id: PrimaryKey
    driverId: SecondaryKey


  excludedFields: [merchantOperatingCityId, merchantId]

  queries:
    findByDriverIdAndDate:
      kvFunction: findOneWithKV
      where:
        and: [driverId, merchantLocalDate]

    findAllByDateAndPayoutStatus:
      kvFunction: findAllWithOptionsKV
      where:
        and: [merchantLocalDate, payoutStatus]

    updateByDriverId:
      kvFunction: updateOneWithKV
      params: [totalEarnings, numRides, totalDistance]
      where:
        and: [driverId, merchantLocalDate]

    updateReferralStatsByDriverId:
      kvFunction: updateOneWithKV
      params: [activatedValidRides, referralEarnings, payoutStatus]
      where:
        and: [driverId, merchantLocalDate]

    updateReferralCount:
      kvFunction: updateOneWithKV
      params: [referralCounts]
      where:
        and: [driverId, merchantLocalDate]

    updatePayoutStatusById:
      kvFunction: updateOneWithKV
      params: [payoutStatus]
      where: id

  extraOperations:
    - EXTRA_QUERY_FILE