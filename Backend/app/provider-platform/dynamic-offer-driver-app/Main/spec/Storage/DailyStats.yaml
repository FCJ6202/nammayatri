imports:
  Person: Domain.Types.Person
  Ride: Domain.Types.Ride
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  UTCTime: Kernel.Prelude
  Text: Data.Text
  Money: Kernel.Types.Common

DailyStats:
  tableName: daily_stats
  derives: "Generic,Show"
  fields:
    id : Text
    driverId : Id Person
    totalEarnings : HighPrecMoney
    currency: Currency
    numRides : Int
    totalDistance : Meters
    merchantLocalDate : Day

  beamFields:
    totalEarnings:
      totalEarnings: Money
      totalEarningsAmount: Maybe HighPrecMoney
    currency:
      currency: Maybe Currency

  fromTType:
    totalEarnings: Kernel.Types.Common.mkAmountWithDefault totalEarningsAmount totalEarnings|E
    currency: Kernel.Prelude.fromMaybe Kernel.Types.Common.INR|I

  toTType:
    totalEarnings: Kernel.Prelude.roundToIntegral|I
    totalEarningsAmount:  Kernel.Prelude.Just|I
    currency: Kernel.Prelude.Just|I

  constraints:
    id: PrimaryKey
    driverId: SecondaryKey

  excludedFields: [merchantOperatingCityId, merchantId]

  queries:
    findByDriverIdAndDate:
      kvFunction: findOneWithKV
      where:
        and: [driverId, merchantLocalDate]

    updateByDriverId:
      kvFunction: updateOneWithKV
      params: [totalEarnings, numRides, totalDistance]
      where:
        and: [driverId, merchantLocalDate]

  extraOperations:
    - EXTRA_QUERY_FILE