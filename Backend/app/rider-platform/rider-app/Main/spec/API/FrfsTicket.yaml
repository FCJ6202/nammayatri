imports:
  Text: Data.Text
  Maybe: Data.Maybe
  Station: Domain.Types.Station
  FRFSQuoteType: Domain.Types.FRFSQuote
  FRFSQuote: Domain.Types.FRFSQuote
  FRFSTicketBookingStatus: Domain.Types.FRFSTicketBooking
  FRFSTicketBooking: Domain.Types.FRFSTicketBooking
  FRFSTicketStatus: Domain.Types.FRFSTicket
  HighPrecMoney: Kernel.Types.Common
  PriceAPIEntity: Kernel.Types.Common
  FRFSSearch: Domain.Types.FRFSSearch
  VehicleCategory: BecknV2.FRFS.Enums
  CreateOrderResp: Kernel.External.Payment.Juspay.Types.CreateOrder
  City: Kernel.Types.Beckn.Context
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  Meters: Kernel.Types.Common
  LatLong: Kernel.External.Maps.Types

module: FRFSTicketService
types:
  FRFSSearchAPIReq:
    fromStationCode: Text
    toStationCode: Text
    routeCode: Maybe Text
    quantity: Int

  FRFSSearchAPIRes:
    searchId: Id FRFSSearch

  FRFSQuoteAPIRes:
    quoteId: Id FRFSQuote
    _type: FRFSQuoteType
    vehicleType: VehicleCategory
    quantity: Int
    price: HighPrecMoney
    priceWithCurrency: PriceAPIEntity
    _route: Maybe FRFSRouteAPI
    stations: [FRFSStationAPI]
    validTill: UTCTime
    discountedTickets: Maybe Int
    eventDiscountAmount: Maybe HighPrecMoney

  FRFSTicketBookingStatusAPIRes:
    bookingId: Id FRFSTicketBooking
    status: FRFSTicketBookingStatus
    city: City
    updatedAt: UTCTime
    _type: FRFSQuoteType
    quantity: Int
    vehicleType: VehicleCategory
    price: HighPrecMoney
    priceWithCurrency: PriceAPIEntity
    validTill: UTCTime
    payment: Maybe FRFSBookingPaymentAPI
    tickets: [FRFSTicketAPI]
    _route: Maybe FRFSRouteAPI
    stations: [FRFSStationAPI]
    createdAt: UTCTime
    discountedTickets: Maybe Int
    eventDiscountAmount: Maybe HighPrecMoney

  FRFSTicketAPI:
    status: FRFSTicketStatus
    qrData: Text
    validTill: UTCTime
    ticketNumber: Text
    derive: "Show"

  FRFSBookingPaymentAPI:
    status: FRFSBookingPaymentStatusAPI
    paymentOrder: Maybe CreateOrderResp

  FRFSBookingPaymentStatusAPI:
    enum: "NEW, PENDING, SUCCESS, FAILURE, REFUND_PENDING, REFUNDED"

  FRFSStationAPI:
    name: Text
    code: Text
    lat: Maybe Double
    lon: Maybe Double
    address: Maybe Text
    stationType: Maybe StationType
    color: Maybe Text
    distance: Maybe Meters
    sequenceNum: Maybe Int
    derive: "Show"

  StationType:
    enum: "START, END, TRANSIT, INTERMEDIATE"

  FRFSCanCancelStatus:
    cancellationCharges : Maybe HighPrecMoney
    refundAmount : Maybe HighPrecMoney
    isCancellable : Maybe Bool

  FRFSCancelStatus:
    cancellationCharges : Maybe HighPrecMoney
    refundAmount : Maybe HighPrecMoney

  FRFSConfigAPIRes:
    bookingStartTime: UTCTime
    bookingEndTime: UTCTime
    roundTripTicketLimit: Int
    oneWayTicketLimit: Int
    metroStationTtl: Int
    discount: Int
    customDates: [Text]
    customEndTime: Text
    isEventOngoing: Bool
    isCancellationAllowed: Bool
    freeTicketInterval: Maybe Int
    maxFreeTicketCashback: Maybe Int
    ticketsBookedInEvent: Int
    derive: "Show"

  FRFSRouteAPI:
    code: Text
    shortName: Text
    longName: Text
    startPoint: LatLong
    endPoint: LatLong
    derive: "Show"

  AutocompleteRes:
    routes: [FRFSRouteAPI]
    stops: [Stop]

  Stop:
    stopCode: Text
    stopName: Text
    distance: Meters

apis:
  # GET metro/bus routes for the merchant city
  - GET:
      endpoint: /frfs/routes
      auth: TokenAuth
      mandatoryQuery:
        vehicleType: VehicleCategory
        city: City
      query:
        startStationCode: Text
        endStationCode: Text
      response:
        type: "[API.Types.UI.FRFSTicketService.FRFSRouteAPI]"

  # GET metro/bus stops for the merchant city
  # - Get all stations when routeCode and startStationCode is Unknown.
  # - Get all stations on a Route when only routeCode is Known.
  # - Get all end stations when startStationCode is Unknown, further filter if routeCode is also Unknown.
  - GET:
      endpoint: /frfs/stations
      auth: TokenAuth
      mandatoryQuery:
        vehicleType: VehicleCategory
      query:
        city: City
        routeCode: Text
        startStationCode: Text
      response:
        type: "[API.Types.UI.FRFSTicketService.FRFSStationAPI]"

  # Initiate search for metro/bus tickets
  - POST:
      endpoint: /frfs/search
      auth: TokenAuth
      mandatoryQuery:
        vehicleType: VehicleCategory
      request:
        type: API.Types.UI.FRFSTicketService.FRFSSearchAPIReq
      response:
        type: API.Types.UI.FRFSTicketService.FRFSSearchAPIRes

  # Get quotes for metro/bus tickets
  - GET:
      endpoint: /frfs/search/{searchId}/quote
      params:
        searchId: Id FRFSSearch
      auth: TokenAuth
      response:
        type: "[API.Types.UI.FRFSTicketService.FRFSQuoteAPIRes]"

  # Confirm quote for metro/bus tickets (return PP sdk params)
  - POST:
      endpoint: /frfs/quote/{quoteId}/confirm
      params:
        quoteId: Id FRFSQuote
      auth: TokenAuth
      response:
        type: API.Types.UI.FRFSTicketService.FRFSTicketBookingStatusAPIRes

  # Retry payment
  - POST:
      endpoint: /frfs/quote/{quoteId}/payment/retry
      params:
        quoteId: Id FRFSQuote
      auth: TokenAuth
      response:
        type: API.Types.UI.FRFSTicketService.FRFSTicketBookingStatusAPIRes

  # Get booking status
  - GET:
      endpoint: /frfs/booking/{bookingId}/status
      params:
        bookingId: Id FRFSTicketBooking
      auth: TokenAuth
      response:
        type: API.Types.UI.FRFSTicketService.FRFSTicketBookingStatusAPIRes

  # List metro/bus tickets
  - GET:
      endpoint: /frfs/booking/list
      auth: TokenAuth
      response:
        type: "[API.Types.UI.FRFSTicketService.FRFSTicketBookingStatusAPIRes]"

  # Booking Soft Cancel
  - POST:
      endpoint: /frfs/booking/{bookingId}/canCancel
      params:
        bookingId: Id FRFSTicketBooking
      auth: TokenAuth
      response:
        type: Kernel.Types.APISuccess.APISuccess

  # Booking Soft Cancel Status
  - GET:
      endpoint: /frfs/booking/{bookingId}/canCancel/status
      params:
        bookingId: Id FRFSTicketBooking
      auth: TokenAuth
      response:
        type: API.Types.UI.FRFSTicketService.FRFSCanCancelStatus

  # Booking Cancel
  - POST:
      endpoint: /frfs/booking/{bookingId}/cancel
      params:
        bookingId: Id FRFSTicketBooking
      auth: TokenAuth
      response:
        type: Kernel.Types.APISuccess.APISuccess

  # Booking Cancel Status
  - GET:
      endpoint: /frfs/booking/cancel/{bookingId}/status
      params:
        bookingId: Id FRFSTicketBooking
      auth: TokenAuth
      response:
        type: API.Types.UI.FRFSTicketService.FRFSCancelStatus


  # Get FRFS Config
  - GET:
      endpoint: /frfs/config
      mandatoryQuery:
        city: City
      auth: TokenAuth
      response:
        type: API.Types.UI.FRFSTicketService.FRFSConfigAPIRes

  - GET:
      endpoint: /frfs/autocomplete
      auth: TokenAuth
      mandatoryQuery:
        city: City
        location: LatLong
        vehicleType: VehicleCategory
      query:
        text: Text
      response:
        type: "[API.Types.UI.FRFSTicketService.AutocompleteRes]"
