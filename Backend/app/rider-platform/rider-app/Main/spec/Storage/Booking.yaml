imports:
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  Version: Kernel.Types.Version
  Price: Kernel.Types.Common
  Seconds: Kernel.Types.Common
  Person: Domain.Types.Person
  Client: Domain.Types.Client
  Location: Domain.Types.Location
  Language: Kernel.External.Maps
  Currency: Kernel.Utils.Common
  Money: Kernel.Utils.Common
  Centesimal: Kernel.Utils.Common
  LocationAddress: Domain.Types.LocationAddress
  BookingStatus: Domain.Types.Extra.Booking
  Quote: Domain.Types.Quote
  MerchantPaymentMethod: Domain.Types.MerchantPaymentMethod
  TripTerms: Domain.Types.TripTerms
  VehicleVariant: Domain.Types.VehicleVariant
  PaymentStatus: BecknV2.OnDemand.Enums
  BaseUrl: Kernel.Types.Common
  FareProductType: Domain.Types.FarePolicy.FareProductType
  HighPrecMeters: Kernel.Types.Common

BookingLocation:
  tableName: booking_location

  derives: "Generic, Show, Eq, Kernel.External.Maps.HasCoordinates.HasCoordinates"

  fields:
    id: Id BookingLocation
    lat: Double
    lon: Double
    address: LocationAddress

  types:
    BookingLocationAPIEntity:
      lat: Double
      lon: Double
      street: Maybe Text
      door: Maybe Text
      city: Maybe Text
      state: Maybe Text
      country: Maybe Text
      building: Maybe Text
      areaCode: Maybe Text
      area: Maybe Text
      ward: Maybe Text
      placeId: Maybe Text

  beamFields:
    address:
      street: Maybe Text
      door: Maybe Text
      city: Maybe Text
      state: Maybe Text
      country: Maybe Text
      building: Maybe Text
      areaCode: Maybe Text
      area: Maybe Text
      ward: Maybe Text
      placeId: Maybe Text

  toTType:
    street: Domain.Types.LocationAddress.street|I
    door: Domain.Types.LocationAddress.door|I
    city: Domain.Types.LocationAddress.city|I
    state: Domain.Types.LocationAddress.state|I
    country: Domain.Types.LocationAddress.country|I
    building: Domain.Types.LocationAddress.building|I
    areaCode: Domain.Types.LocationAddress.areaCode|I
    area: Domain.Types.LocationAddress.area|I
    ward: Domain.Types.LocationAddress.ward|I
    placeId: Domain.Types.LocationAddress.placeId|I

  fromTType:
    address: Domain.Types.LocationAddress.LocationAddress {street,door,city,state,country,building,areaCode,area,ward,placeId}|E

  excludedFields: [merchantId, merchantOperatingCityId]

  excludedDefaultQueries:
    - createMany
    - updateByPrimaryKey
    - findByPrimaryKey

  sqlType:
    street: character varying(255)
    door: character varying(255)
    city: character varying(255)
    state: character varying(255)
    country: character varying(255)
    building: character varying(255)
    areaCode: character varying(255)
    area: character varying(255)
    ward: character varying(255)
    placeId: text

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    updateAddress:
      kvFunction: updateOneWithKV
      params: [address]
      where: id

Booking:
  tableName: booking

  derives: Generic,Show

  types:
    BPPBooking: {}
    BookingDetails:
      enum: OneWayDetails OneWayBookingDetails,RentalDetails RentalBookingDetails,DriverOfferDetails OneWayBookingDetails,OneWaySpecialZoneDetails OneWaySpecialZoneBookingDetails,InterCityDetails InterCityBookingDetails
      derive': Show
    OneWayBookingDetails:
      toLocation: Location
      distance: HighPrecMeters
      derive': Show
    RentalBookingDetails:
      stopLocation: Maybe Location
      derive': Show
    OneWaySpecialZoneBookingDetails:
      toLocation: Location
      distance: HighPrecMeters
      otpCode: Maybe Text
      derive': Show
    InterCityBookingDetails:
      toLocation: Location
      distance: HighPrecMeters
      derive': Show

  fields:
    id: Id Booking
    transactionId: Text
    fulfillmentId: Maybe Text
    clientId: Maybe (Id Client)
    bppBookingId: Maybe (Id BPPBooking)
    quoteId: Maybe (Id Quote)
    paymentMethodId: Maybe (Id MerchantPaymentMethod)
    paymentUrl: Maybe Text
    status: BookingStatus
    providerId: Text
    providerUrl: BaseUrl
    itemId: Text
    primaryExophone: Text
    startTime: UTCTime
    riderId: Id Person
    fromLocation: Location
    initialPickupLocation: Location|NoRelation
    estimatedFare: Price
    estimatedDistance: Maybe HighPrecMeters
    estimatedDuration: Maybe Seconds
    discount: Maybe Price
    estimatedTotalFare: Price
    isScheduled: Bool
    vehicleVariant: VehicleVariant|NoRelation
    bookingDetails: BookingDetails
    tripTerms: Maybe TripTerms
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    specialLocationTag: Maybe Text
    createdAt: UTCTime
    updatedAt: UTCTime
    serviceTierName: Maybe Text
    paymentStatus: Maybe PaymentStatus

  beamFields:
    bookingDetails:
      fareProductType: FareProductType
      toLocationId: Maybe Text
      distance: Maybe HighPrecMeters
      stopLocationId: Maybe Text
      otpCode: Maybe Text
    fromLocation:
      fromLocationId: Maybe Text
    tripTerms:
      tripTermsId: Maybe Text
    estimatedFare:
      currency: Maybe Currency
      estimatedFare: HighPrecMoney
    initialPickupLocation: {}
  beamInstance: MakeTableInstancesWithTModifier [("bppBookingId", "bpp_ride_booking_id")]
  beamType:
    providerUrl: Text
    discount: Maybe HighPrecMoney
    estimatedTotalFare: HighPrecMoney
    currency: Maybe Currency
    tripTermsId: Maybe Text
    isScheduled: Maybe Bool
    merchantOperatingCityId: Maybe Text

  toTType:
    fareProductType: getFareProductType
    toLocationId: getToLocationId
    distance: getDistance
    stopLocationId: getStopLocationId
    otpCode: getOtpCode
    providerUrl: (showBaseUrl providerUrl)|E
    fromLocationId: (Just $ Kernel.Types.Id.getId $ (.id) fromLocation)|E
    estimatedFare: ((.amount) estimatedFare)|E
    discount: (discount <&> (.amount))|E
    estimatedTotalFare: ((.amount) estimatedTotalFare)|E
    currency: (Just $ (.currency) estimatedFare)|E
    tripTermsId: (Kernel.Types.Id.getId <$> (tripTerms <&> (.id)))|E
    isScheduled: (Just isScheduled)|E
    merchantOperatingCityId: (Just $ Kernel.Types.Id.getId merchantOperatingCityId)|E

  intermediateTransformers:
    fromTType:
      - mappings: Storage.Queries.LocationMapping.findByEntityId id|EM
      - fromLocationAndBookingDetails': Storage.Queries.Transformers.Booking.fromLocationAndBookingDetails id merchantId merchantOperatingCityId mappings distance fareProductType toLocationId fromLocationId stopLocationId otpCode|EM #check
  fromTType:
    providerUrl: parseBaseUrl providerUrl|EM
    fromLocation: (fst fromLocationAndBookingDetails')|E
    bookingDetails: (snd fromLocationAndBookingDetails')|E
    tripTerms: if isJust tripTermsId then Storage.Queries.TripTerms.findById'' (Kernel.Types.Id.Id (fromJust tripTermsId)) else pure Nothing|EM
    merchantOperatingCityId: Storage.Queries.Transformers.Booking.backfillMOCId merchantOperatingCityId merchantId|EM
    initialPickupLocation: Storage.Queries.Transformers.Booking.getInitialPickupLocation mappings (fst fromLocationAndBookingDetails')|EM
    estimatedFare: (Kernel.Types.Common.mkPrice currency estimatedFare)|E
    discount: (Kernel.Types.Common.mkPrice currency <$> discount)|E
    estimatedTotalFare: (Kernel.Types.Common.mkPrice currency estimatedTotalFare)|E
    isScheduled: (fromMaybe False isScheduled)|E

  extraOperations:
    - EXTRA_QUERY_FILE
    - EXTRA_DOMAIN_TYPE_FILE

  excludedDefaultQueries:
    - create
    - createMany

  constraints:
    bppBookingId: SecondaryKey
    riderId: SecondaryKey
    quoteId: SecondaryKey
    transactionId: SecondaryKey