imports:
  SearchRequest: Domain.Types.SearchRequest
  TravelMode: Domain.Types.Common
  Price: Kernel.Types.Common
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  EncryptedHashedField: Kernel.External.Encryption
  Currency: Kernel.Types.Common
  Location: Domain.Types.Location
  Person: Domain.Types.Person
  JourneySearchData: Lib.JourneyPlannerTypes

# add journeyLegId (Maybe (Id JourneyLeg)) in SearchRequest
Journey:
  tableName: journey

  fields:
    id: Id Journey
    searchRequestId: Id SearchRequest
    fare: Maybe Price
    estimatedFare: Maybe Price
    estimatedDistance: Distance
    estimatedDuration: Maybe Seconds
    modes: "[TravelMode]"
    convenienceCost: Int
    totalLegs: Int
    legsDone: Int

  beamFields:
    fare:
      fare: Maybe HighPrecMoney
      currency: Maybe Currency
    estimatedDistance:
      estimatedDistance: HighPrecDistance
      distanceUnit: DistanceUnit

  beamType:
    estimatedFare: Maybe HighPrecMoney

  fromTType:
    fare: ((Kernel.Types.Common.mkPrice currency) <$> fare)|E
    estimatedFare: ((Kernel.Types.Common.mkPrice currency) <$> estimatedFare)|E
    estimatedDistance: (Kernel.Types.Common.Distance estimatedDistance distanceUnit)|E

  toTType:
    fare: (Kernel.Prelude.fmap (.amount))|I
    currency: (Kernel.Prelude.fmap (.currency))|I
    estimatedFare: (Kernel.Prelude.fmap (.amount))|I
    estimatedDistance: ((.value))|I
    distanceUnit: ((.unit))|I

  constraints:
    id: PrimaryKey
    searchRequestId: "!SecondaryKey"

  queries:
    updateEstimatedFare:
      kvFunction: updateWithKV
      params: [estimatedFare]
      where: id
    updateNumberOfLegs:
      kvFunction: updateWithKV
      params: [legsDone]
      where: id

  sqlType:
    modes: "text[]"

#passenger details
JourneyBooking:
  fields:
    id: Id JourneyBooking
    journeyId: Id Journey
    fare: Maybe Price
    estimatedFare: Maybe Price
    estimatedDistance: Distance
    estimatedDuration: Maybe Seconds
    modes: "[TravelMode]"
    numberOfPassengers: Int
    convenienceCost: Int
    isBookingCancellable: Bool
    customerCancelled: Bool

  beamFields:
    fare:
      fare: Maybe HighPrecMoney
      currency: Maybe Currency
    estimatedDistance:
      estimatedDistance: HighPrecDistance
      distanceUnit: DistanceUnit

  beamType:
    estimatedFare: Maybe HighPrecMoney

  fromTType:
    fare: ((Kernel.Types.Common.mkPrice currency) <$> fare)|E
    estimatedFare: ((Kernel.Types.Common.mkPrice currency) <$> estimatedFare)|E
    estimatedDistance: (Kernel.Types.Common.Distance estimatedDistance distanceUnit)|E

  toTType:
    fare: (Kernel.Prelude.fmap (.amount))|I
    currency: (Kernel.Prelude.fmap (.currency))|I
    estimatedFare: (Kernel.Prelude.fmap (.amount))|I
    estimatedDistance: ((.value))|I
    distanceUnit: ((.unit))|I

  constraints:
    id: PrimaryKey
    journeyId: "!SecondaryKey"

# use booking, FRFS booking and bus booking for journey leg booking and attach the journey booking id there
PassengerDetails:
  fields:
    id: Id PassengerDetails
    bookingId: Text
    firstName: Text
    lastName: Maybe Text
    age: Maybe Int

WalkLegMultimodal:
  tableName: walk_leg_multimodal

  derives: "Generic, Show"

  fields:
    id: Id WalkLegMultimodal
    startTime: UTCTime
    # validTill: UTCTime
    riderId: Id Person
    fromLocation: Location
    toLocation: Maybe Location
    estimatedDistance: Distance
    estimatedDuration: Maybe Seconds
    # clientDevice: Maybe Device
    journeyLegInfo: Maybe JourneySearchData

  sqlType:
    toLocationId : character varying(36)
    fromLocationId: character varying(36)

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

  beamFields:
    estimatedDistance:
      estimatedDistance: HighPrecDistance
      distanceUnit: DistanceUnit
    fromLocation:
      fromLocationId: Maybe Text
    toLocation:
      toLocationId: Maybe Text
    journeyLegInfo:
      journeyLegOrder: Maybe Int
      journeyId: Maybe Text
      agency: Maybe Text
      skipBooking: Maybe Bool
      convenienceCost: Maybe Int
      pricingId: Maybe Text

  fromTType:
    estimatedDistance: (Kernel.Types.Common.Distance estimatedDistance distanceUnit)|E
    fromLocation: Storage.Queries.Transformers.MultiModal.getFromLocation id|EM
    toLocation: Storage.Queries.Transformers.MultiModal.getToLocation id|EM
    journeyLegInfo: Storage.Queries.Transformers.MultiModal.mkJourneyLegInfo

  toTType:
    estimatedDistance: ((.value))|I
    distanceUnit: ((.unit))|I
    fromLocationId: (Just $ Kernel.Types.Id.getId ((.id) fromLocation))|E
    toLocationId: (Kernel.Types.Id.getId <$> (toLocation <&> (.id)))|E
    journeyLegOrder: Kernel.Prelude.fmap (.journeyLegOrder)|I
    journeyId: Kernel.Prelude.fmap (.journeyId)|I
    agency: (journeyLegInfo >>= (.agency))|E
    skipBooking: Kernel.Prelude.fmap (.skipBooking)|I
    convenienceCost: Kernel.Prelude.fmap (.convenienceCost)|I
    pricingId: (journeyLegInfo >>= (.pricingId))|E


