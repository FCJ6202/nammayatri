imports:
  SearchRequest: Domain.Types.SearchRequest
  TravelMode: Domain.Types.Common
  Price: Kernel.Types.Common
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  EncryptedHashedField: Kernel.External.Encryption
  Currency: Kernel.Types.Common

# add journeyLegId (Maybe (Id JourneyLeg)) in SearchRequest
Journey:
  tableName: journey

  fields:
    id: Id Journey
    searchRequestId: Id SearchRequest
    fare: Maybe Price
    estimatedFare: Maybe Price
    estimatedDistance: Distance
    estimatedDuration: Maybe Seconds
    modes: "[TravelMode]"
    convenienceCost: Int

  beamFields:
    fare:
      fare: Maybe HighPrecMoney
      currency: Maybe Currency
    estimatedDistance:
      estimatedDistance: HighPrecDistance
      distanceUnit: DistanceUnit

  beamType:
    estimatedFare: Maybe HighPrecMoney

  fromTType:
    fare: ((Kernel.Types.Common.mkPrice currency) <$> fare)|E
    estimatedFare: ((Kernel.Types.Common.mkPrice currency) <$> estimatedFare)|E
    estimatedDistance: (Kernel.Types.Common.Distance estimatedDistance distanceUnit)|E

  toTType:
    fare: (Kernel.Prelude.fmap (.amount))|I
    currency: (Kernel.Prelude.fmap (.currency))|I
    estimatedFare: (Kernel.Prelude.fmap (.amount))|I
    estimatedDistance: ((.value))|I
    distanceUnit: ((.unit))|I

  constraints:
    id: PrimaryKey
    searchRequestId: "!SecondaryKey"

#passenger details
JourneyBooking:
  fields:
    id: Id JourneyBooking
    journeyId: Id Journey
    fare: Maybe Price
    estimatedFare: Maybe Price
    estimatedDistance: Distance
    estimatedDuration: Maybe Seconds
    modes: "[TravelMode]"
    numberOfPassengers: Int
    convenienceCost: Int
    isBookingCancellable: Bool
    customerCancelled: Bool

  beamFields:
    fare:
      fare: Maybe HighPrecMoney
      currency: Maybe Currency
    estimatedDistance:
      estimatedDistance: HighPrecDistance
      distanceUnit: DistanceUnit

  beamType:
    estimatedFare: Maybe HighPrecMoney

  fromTType:
    fare: ((Kernel.Types.Common.mkPrice currency) <$> fare)|E
    estimatedFare: ((Kernel.Types.Common.mkPrice currency) <$> estimatedFare)|E
    estimatedDistance: (Kernel.Types.Common.Distance estimatedDistance distanceUnit)|E

  toTType:
    fare: (Kernel.Prelude.fmap (.amount))|I
    currency: (Kernel.Prelude.fmap (.currency))|I
    estimatedFare: (Kernel.Prelude.fmap (.amount))|I
    estimatedDistance: ((.value))|I
    distanceUnit: ((.unit))|I

  constraints:
    id: PrimaryKey
    journeyId: "!SecondaryKey"

# use booking, FRFS booking and bus booking for journey leg booking and attach the journey booking id there
PassengerDetails:
  fields:
    id: Id PassengerDetails
    bookingId: Text
    firstName: Text
    lastName: Maybe Text
    age: Maybe Int
