imports:
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  MerchantMessageDefaultDataJSON: Domain.Types.Extra.MerchantMessage
  CallService: Kernel.External.Call.Types
  MapsService: Kernel.External.Maps.Types
  NotificationService: Kernel.External.Notification.Types
  AadhaarVerificationService: Kernel.External.AadhaarVerification
  SmsService: Kernel.External.SMS.Types
  WhatsappService: Kernel.External.Whatsapp.Types
  IssueTicketService: Kernel.External.Ticket.Types

MerchantServiceConfig:
  derives: "Generic,'UsageSafety"

  fields:
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    serviceConfig: Domain.Types.Extra.MerchantServiceConfig.ServiceConfigD s
    updatedAt: UTCTime
    createdAt: UTCTime

  beamFields:
    serviceConfig:
      serviceName: Domain.Types.MerchantServiceConfig.ServiceName
      configJSON: Data.Aeson.Value
  sqlType:
    serviceName: character varying(30)
    configJSON: json
  constraints:
    merchantId: PrimaryKey
    serviceName: PrimaryKey

  fromTType:
    serviceConfig: Storage.Queries.Transformers.MerchantServiceConfig.getServiceConfigFromDomain serviceName configJSON|EM

  toTType:
    serviceName: (fst $ Storage.Queries.Transformers.MerchantServiceConfig.getServiceNameConfigJson serviceConfig)|E
    configJSON: (snd $ Storage.Queries.Transformers.MerchantServiceConfig.getServiceNameConfigJson serviceConfig)|E

  extraOperations:
    - EXTRA_DOMAIN_TYPE_FILE
    - EXTRA_QUERY_FILE

  excludedDefaultQueries:
    - create
    - createMany
    - findByPrimaryKey
    - updateByPrimaryKey

MerchantServiceUsageConfig:

  derives: "Generic,Show,'UsageSafety"

  fields:
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    initiateCall: CallService
    notifyPerson: NotificationService
    getDistances: MapsService
    getRoutes: MapsService
    snapToRoad: MapsService
    getPlaceName: MapsService
    getPickupRoutes: MapsService
    getTripRoutes: MapsService
    getPlaceDetails: MapsService
    autoComplete: MapsService
    aadhaarVerificationService: AadhaarVerificationService
    getDistancesForCancelRide: MapsService
    smsProvidersPriorityList: "[SmsService]"
    whatsappProvidersPriorityList: "[WhatsappService]"
    issueTicketService: IssueTicketService
    useFraudDetection: Bool
    enableDashboardSms: Bool
    getExophone: CallService
    updatedAt: UTCTime
    createdAt: UTCTime

  beamInstance:
    - MakeTableInstances
    - Custom Domain.Types.UtilsTH.mkCacParseInstance <MerchantServiceUsageConfigT>

  constraints:
    merchantOperatingCityId: PrimaryKey

  queries:
    findByMerchantOperatingCityId:
      kvFunction: findOneWithKV
      where: merchantOperatingCityId

  excludedDefaultQueries:
    - findByPrimaryKey
    - updateByPrimaryKey

  extraOperations:
    - EXTRA_QUERY_FILE

  sqlType:
    getDistances: character varying(30)
    getRoutes: character varying(30)
    snapToRoad: character varying(30)
    getPlaceName: character varying(30)
    getPlaceDetails: character varying(30)
    autoComplete: character varying(30)
    smsProvidersPriorityList: "text[]"
    whatsappProvidersPriorityList: "text[]"
    initiateCall: character varying(30)
    issueTicketService: character varying(30)
    getExophone: character varying (255)
    aadhaarVerificationService: character varying(30)

  default:
    getPickupRoutes: "'Google'"
    getTripRoutes: "'Google'"
    useFraudDetection: "False"
    issueTicketService: "'Kapture'"
    getExophone: "'Exotel'"


MerchantPaymentMethod:
  derives: "Generic,'UsageSafety"
  fields:
    id: Id MerchantPaymentMethod
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    paymentType: Domain.Types.Extra.MerchantPaymentMethod.PaymentType
    paymentInstrument: Domain.Types.Extra.MerchantPaymentMethod.PaymentInstrument
    collectedBy: Domain.Types.Extra.MerchantPaymentMethod.PaymentCollector
    priority: Int
    updatedAt: UTCTime
    createdAt: UTCTime

  default: {}
  sqlType:
    paymentType: character varying(30)
    paymentInstrument: character varying(255)
    collectedBy: character varying(30)
    priority: int


  fromTType:
    paymentType: paymentTypeTrans

  constraints:
    merchantOperatingCityId: SecondaryKey

  excludedDefaultQueries:
   - findByPrimaryKey
   - updateByPrimaryKey

  extraOperations:
   - EXTRA_DOMAIN_TYPE_FILE
   - EXTRA_QUERY_FILE



MerchantMessage:
  tableName: merchant_message

  derives: "Generic,'UsageSafety"

  types:
    MessageKey:
      enum: "INVITE_TO_UNEXISTENT_EMERGENCY_NUMBER,SET_AS_RIDE_EMERGENCY_NUMBER,SET_AS_DEFAULT_EMERGENCY_NUMBER,SEND_OTP,SEND_BOOKING_OTP,SEND_SOS_ALERT,MARK_RIDE_AS_SAFE,FOLLOW_RIDE,ADDED_AS_EMERGENCY_CONTACT"

  fields:
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    messageKey: MessageKey
    message: Text
    templateId: Text
    jsonData: MerchantMessageDefaultDataJSON
    containsUrlButton: Bool
    updatedAt: UTCTime
    createdAt: UTCTime

  beamType:
    templateId: Maybe Text
    jsonData: Maybe Data.Aeson.Value

  default:
    containsUrlButton: "False"
  sqlType:
    templateId: character varying(255)
    jsonData: json
    messageKey: character varying(255)

  fromTType:
    templateId: fromMaybe "" templateId|E
    jsonData: valueToJsonData
  toTType:
    templateId: (Just templateId)|E
    jsonData: (Just $ toJSON jsonData)|E
  constraints:
    merchantOperatingCityId: PrimaryKey
    messageKey: PrimaryKey

  queries:
    findAllByMerchantOpCityId:
      kvFunction: findAllWithKV
      where: merchantOperatingCityId
    findByMerchantOperatingCityIdAndMessageKey:
      kvFunction: findOneWithKV
      where:
        and: [merchantOperatingCityId, messageKey]
  excludedDefaultQueries:
   - findByPrimaryKey
   - updateByPrimaryKey

  extraOperations:
   - EXTRA_DOMAIN_TYPE_FILE




