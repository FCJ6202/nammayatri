imports:
  Text: Data.Text
  APISuccess: Kernel.Types.APISuccess
  VehicleCategory: BecknV2.FRFS.Enums
  LatLong: Kernel.External.Maps.Types
  FilePath: EulerHS.Prelude

module: FRFSTicket
types:
  FRFSRouteAPI:
    code: Text
    shortName: Text
    longName: Text
    startPoint: LatLong
    endPoint: LatLong

  FRFSRouteReq:
    shortName: Text
    longName: Text
    startPoint: LatLong
    endPoint: LatLong
    derive: "'HideSecrets"

  FRFSStartStopsAPI:
    name: Text
    code: Text
    lat: Maybe Double
    lon: Maybe Double

  FRFSEndStopsFareAPI:
    name: Text
    code: Text
    amount: HighPrecMoney
    currency: Currency
    lat: Maybe Double
    lon: Maybe Double

  FRFSStopFareMatrixAPI:
    startStop: "FRFSStartStopsAPI"
    endStops: "[FRFSEndStopsFareAPI]"

  FRFSRouteFareAPI:
    code: Text
    shortName: Text
    longName: Text
    fares: "[FRFSStopFareMatrixAPI]"

  FRFSStationAPI:
    name: Text
    code: Text
    lat: Double
    lon: Double
    address: Maybe Text

  FRFSStationReq:
    name: Text
    lat: Double
    lon: Double
    address: Maybe Text
    derive: "'HideSecrets"

  UpsertRouteFareReq:
    recordType: NewType
    file: FilePath
    derive: "'HideSecrets"
apis:
  - GET: # Get list of all the FRFS routes
      endpoint: /frfs/routes
      auth:
        ApiAuth APP_BACKEND FRFS LIST_FRFS_ROUTES
      mandatoryQuery:
        vehicleType: VehicleCategory
        limit: Int
        offset: Int
      response:
        type: "[FRFSRouteAPI]"
  - POST: # Add new route
      endpoint: /frfs/route/{code}/add
      mandatoryQuery:
        vehicleType: VehicleCategory
      params:
        code: Text
      request:
        type: FRFSRouteReq
      auth:
        ApiAuth APP_BACKEND FRFS ADD_FRFS_ROUTE
      response:
        type: APISuccess
  - POST: # Delete a route
      endpoint: /frfs/route/{code}/delete
      mandatoryQuery:
        vehicleType: VehicleCategory
      params:
        code: Text
      auth:
        ApiAuth APP_BACKEND FRFS DELETE_FRFS_ROUTE
      response:
        type: APISuccess
  - GET: # Get list of stop fares for a Route
      endpoint: /frfs/route/fare/{routeCode}/list
      mandatoryQuery:
        vehicleType: VehicleCategory
      params:
        routeCode: Text
      auth:
        ApiAuth APP_BACKEND FRFS LIST_FRFS_ROUTE_FARE
      response:
        type: "[FRFSRouteFareAPI]"
  - PUT: # Upsert fares for Route through CSV
      endpoint: /frfs/route/fare/{routeCode}/upsert
      mandatoryQuery:
        vehicleType: VehicleCategory
      params:
        routeCode: Text
      multipart:
        type: UpsertRouteFareReq
      auth:
        ApiAuth APP_BACKEND FRFS UPSERT_FRFS_ROUTE_FARE
      response:
        type: APISuccess
  - GET: # List all stations
      endpoint: /frfs/route/stations
      mandatoryQuery:
        vehicleType: VehicleCategory
        limit: Int
        offset: Int
      query:
        searchStr: Text
      auth:
        ApiAuth APP_BACKEND FRFS LIST_FRFS_STATION
      response:
        type: "[FRFSStationAPI]"
  - POST: # Add new station
      endpoint: /frfs/station/{code}/add
      mandatoryQuery:
        vehicleType: VehicleCategory
      params:
        code: Text
      request:
        type: FRFSStationReq
      auth:
        ApiAuth APP_BACKEND FRFS ADD_FRFS_STATION
      response:
        type: APISuccess
  - POST: # Delete a station
      endpoint: /frfs/station/{code}/delete
      mandatoryQuery:
        vehicleType: VehicleCategory
      params:
        code: Text
      auth:
        ApiAuth APP_BACKEND FRFS DELETE_FRFS_STATION
      response:
        type: APISuccess

extraOperations:
  - EXTRA_API_TYPES_FILE
