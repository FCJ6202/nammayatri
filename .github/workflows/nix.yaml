name: Nix CI
on:
  push:
    branches: ["main", "prodHotPush-Common"]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: ["main", "prodHotPush-Common"]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: read
  packages: write

jobs:
  process-labels:
    runs-on: ubuntu-latest
    # Skip this job for PR close events without merge
    if: github.event.pull_request.merged == true || github.event_name != 'pull_request' || github.event.action != 'closed'
    outputs:
      has-backend: ${{ steps.check-labels.outputs.has_backend }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Apply labels
        uses: actions/labeler@v4
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Check for backend label
        id: check-labels
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            sleep 5 # Small delay to ensure labels are applied
            response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels")
            has_backend=$(echo "$response" | jq 'map(select(.name == "backend")) | length > 0')
          else
            # For direct pushes to main/prodHotPush-Common, assume backend changes
            has_backend=true
          fi
          echo "has_backend=${has_backend}" >> $GITHUB_OUTPUT
          echo "Label check result: ${has_backend}"

  build:
    strategy:
      matrix:
        include:
          # Direct builds
          - system: x86_64-linux
            build-for: x86_64-linux
          - system: aarch64-darwin
            build-for: aarch64-darwin
          # Cross compilation
          - system: aarch64-darwin
            build-for: aarch64-linux
    needs: [process-labels]
    timeout-minutes: 1440
    runs-on: ${{ matrix.system }}
    if: |
      needs.process-labels.outputs.has-backend == 'true' && 
      (github.event_name != 'pull_request' || github.event.pull_request.merged == true || github.event.action != 'closed')
    steps:
      - uses: actions/checkout@v4
      - name: Build all flake outputs
        run: |
          om ci run --systems "${{ matrix.build-for }}" --no-out-link -- -v


  # The previous job would have already built for macOS but we must do it again
  # from NixOS host (via remote builder protocol) so as to populate its local
  # Nix store, and thus provide macOS binaries as part of our Nix cache.
  macos-build-for-cache:
    runs-on: ${{ matrix.host }}
    needs: [build, process-labels]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        system: [aarch64-darwin]
        host: [x86_64-linux]
    steps:
      - uses: actions/checkout@v4
      - name: Build all flake outputs
        run: |
          om ci run --systems "${{ matrix.system }}" --no-out-link -- -v

  docker-build-amd64:
    needs: [build]
    runs-on: x86_64-linux
    outputs:
      image-name: ${{ steps.image-info.outputs.name }}
      image-tag: ${{ steps.image-info.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get image info
        id: image-info
        run: |
          echo "name=$(nix eval --raw .#dockerImage.imageName)" >> $GITHUB_OUTPUT
          echo "tag=$(nix eval --raw .#dockerImage.imageTag)" >> $GITHUB_OUTPUT

      - name: Build x86_64 Docker image
        run: |
          nix build .#dockerImage -o docker-image-amd64.tgz
          # Set the architecture explicitly in the image config
          tar xf docker-image-amd64.tgz
          docker load < docker-image-amd64.tgz
          IMAGE_NAME=$(nix eval --raw .#dockerImage.imageName)
          TAG=$(nix eval --raw .#dockerImage.imageTag)
          docker tag ${IMAGE_NAME}:${TAG} ${IMAGE_NAME}-amd64:${TAG}
          # Save with explicit architecture
          docker save ${IMAGE_NAME}-amd64:${TAG} | gzip > docker-image-amd64.tgz

      - name: Upload x86_64 Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-amd64
          path: docker-image-amd64.tgz

  docker-build-arm64:
    needs: [build]
    runs-on: aarch64-darwin
    steps:
      - uses: actions/checkout@v4

      - name: Build ARM64 Docker image
        run: |
          nix build .#dockerImage -o docker-image-arm64.tgz
          # Set the architecture explicitly in the image config
          tar xf docker-image-arm64.tgz
          docker load < docker-image-arm64.tgz
          IMAGE_NAME=$(nix eval --raw .#dockerImage.imageName)
          TAG=$(nix eval --raw .#dockerImage.imageTag)
          docker tag ${IMAGE_NAME}:${TAG} ${IMAGE_NAME}-arm64:${TAG}
          # Save with explicit architecture
          docker save ${IMAGE_NAME}-arm64:${TAG} | gzip > docker-image-arm64.tgz

      - name: Upload ARM64 Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-arm64
          path: docker-image-arm64.tgz

  push-docker:
    needs: [docker-build-amd64, docker-build-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Download x86_64 Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-amd64
          path: amd64

      - name: Download ARM64 Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-arm64
          path: arm64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push images and create manifest
        run: |
          # Load both images
          docker load < amd64/docker-image-amd64.tgz
          docker load < arm64/docker-image-arm64.tgz
          
          IMAGE_NAME="${{ needs.docker-build-amd64.outputs.image-name }}"
          TAG="${{ needs.docker-build-amd64.outputs.image-tag }}"
          
          # Push individual architecture images
          docker push ${IMAGE_NAME}-amd64:${TAG}
          docker push ${IMAGE_NAME}-arm64:${TAG}
          
          # Create and push the manifest list with explicit architecture annotations
          docker manifest create ${IMAGE_NAME}:${TAG} \
            --amend ${IMAGE_NAME}-amd64:${TAG} --arch amd64 --os linux \
            --amend ${IMAGE_NAME}-arm64:${TAG} --arch arm64 --os linux
          
          # Verify the manifest
          docker manifest inspect ${IMAGE_NAME}:${TAG}
          
          # Push the manifest
          docker manifest push --purge ${IMAGE_NAME}:${TAG}
          
          # Clean up
          docker logout ghcr.io