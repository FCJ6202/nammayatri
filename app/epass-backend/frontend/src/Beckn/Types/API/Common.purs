-- File auto generated by purescript-bridge! --
module Beckn.Types.API.Common where

import Beckn.Types.Storage.User (UserT)
import Data.Functor.Identity (Identity)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))

import Prelude
import Data.Generic (class Generic)

newtype UserInfo =
    UserInfo {
      _user :: UserT Identity
    , _locationInfo :: LocationInfo
    }

derive instance genericUserInfo :: Generic UserInfo
derive instance newtypeUserInfo :: Newtype UserInfo _

--------------------------------------------------------------------------------
_UserInfo :: Iso' UserInfo { _user :: UserT Identity, _locationInfo :: LocationInfo}
_UserInfo = _Newtype

user :: Lens' UserInfo (UserT Identity)
user = _Newtype <<< prop (SProxy :: SProxy "_user")

locationInfo :: Lens' UserInfo LocationInfo
locationInfo = _Newtype <<< prop (SProxy :: SProxy "_locationInfo")

--------------------------------------------------------------------------------
newtype UserInfo =
    UserInfo {
      _user :: UserT Identity
    , _locationInfo :: LocationInfo
    }

derive instance genericUserInfo :: Generic UserInfo
derive instance newtypeUserInfo :: Newtype UserInfo _

--------------------------------------------------------------------------------
_UserInfo :: Iso' UserInfo { _user :: UserT Identity, _locationInfo :: LocationInfo}
_UserInfo = _Newtype

user :: Lens' UserInfo (UserT Identity)
user = _Newtype <<< prop (SProxy :: SProxy "_user")

locationInfo :: Lens' UserInfo LocationInfo
locationInfo = _Newtype <<< prop (SProxy :: SProxy "_locationInfo")

--------------------------------------------------------------------------------
